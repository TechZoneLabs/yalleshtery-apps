import '../../../cart/data/models/cart_model.dart';
import '../../../cart/domain/entities/cart.dart';
import '../../domain/entities/order.dart';

class OrderModel extends OrderEntity {
  const OrderModel({
    required String id,
    required String userId,
    required String clientId,
    required String orderCode,
    required String orderAddress,
    required String orderShippingNote,
    required String userStoreId,
    required String userStoreName,
    required String userStoreUrl,
    required String userStoreImage,
    required String countryId,
    required String cityId,
    required String supTotalPrice,
    required String deliveryPrice,
    required String systemOrderCommission,
    required String totalPrice,
    required String totalQuantity,
    required String totalCommision,
    required String totalSystemProductCommissions,
    required String status,
    required String isPaid,
    required String setFrom,
    required String dateAdded,
    required String addedBy,
    required String clientName,
    required String clientMobile,
    required String cityName,
    required String countProduct,
    required String ticket,
    required List<CartProduct> items,
    required String discount,
  }) : super(
          id: id,
          userId: userId,
          clientId: clientId,
          orderCode: orderCode,
          orderAddress: orderAddress,
          orderShippingNote: orderShippingNote,
          userStoreId: userStoreId,
          userStoreName: userStoreName,
          userStoreUrl: userStoreUrl,
          userStoreImage: userStoreImage,
          countryId: countryId,
          cityId: cityId,
          supTotalPrice: supTotalPrice,
          deliveryPrice: deliveryPrice,
          systemOrderCommission: systemOrderCommission,
          totalPrice: totalPrice,
          totalQuantity: totalQuantity,
          totalCommision: totalCommision,
          totalSystemProductCommissions: totalSystemProductCommissions,
          status: status,
          isPaid: isPaid,
          setFrom: setFrom,
          dateAdded: dateAdded,
          addedBy: addedBy,
          clientName: clientName,
          clientMobile: clientMobile,
          cityName: cityName,
          countProduct: countProduct,
          ticket: ticket,
          items: items,
          discount: discount,
        );

  factory OrderModel.fromJson(Map<String, dynamic> map) => OrderModel(
        id: map['id'],
        userId: map['user_id'] ?? '',
        clientId: map['client_id'] ?? '',
        orderCode: map['order_code'] ?? '',
        orderAddress: map['order_address'] ?? map['address'] ?? '',
        orderShippingNote: map['order_shipping_note'] ?? '',
        userStoreId: map['user_store_id'] ?? '',
        userStoreName: map['user_store_name'] ?? '',
        userStoreUrl: map['user_store_url'] ?? '',
        userStoreImage: map['user_store_image'] ?? '',
        countryId: map['country_id'] ?? '',
        cityId: map['city_id'] ?? '',
        supTotalPrice: map['sup_total_price'] ?? '',
        deliveryPrice: map['shipment_value'] ?? '0.0',
        systemOrderCommission: map['system_order_commission'] ?? '',
        totalPrice: map['total_price'] ?? '',
        totalQuantity: map['total_quantity'] ?? '',
        totalCommision: map['total_commision'] ?? '',
        totalSystemProductCommissions:
            map['total_system_product_commissions'] ?? '',
        status: map['status'] ?? '',
        isPaid: map['is_paid'] ?? '',
        setFrom: map['set_from'] ?? '',
        dateAdded: map['date_added'] ?? '',
        addedBy: map['added_by'] ?? '',
        clientName: map['client_name'] ?? '',
        clientMobile: map['client_mobile'] ?? '',
        cityName: map['city_name'] ?? '',
        countProduct: map['count_product'] ?? '',
        ticket: map['ticket'] ?? '',
        discount: map['discount'] ?? '0.0',
        items: map.containsKey('invoice_items')
            ? (map['invoice_items'] as List)
                .map((e) => CartProductModel.fromJson(e))
                .toList()
            : [],
      );
}
